name: Update Release Notes

on:
  push:
    tags:
      - 'v*'  # Run workflow when a tag starting with 'v' is pushed (e.g., v1.3.0)

jobs:
  update-release:
    runs-on: ubuntu-latest
    # Add permissions needed for pushing to the repository
    permissions:
      contents: write
      pull-requests: write
      issues: write
      statuses: write
      checks: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for commit messages
          token: ${{ secrets.GITHUB_TOKEN }}  # Use the GitHub token for authentication

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      
      - name: Generate changes from commit messages
        run: |
          # Get all commits since the last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag, get all commits
            COMMITS=$(git log --pretty=format:"%s" | grep -v "Merge")
          else
            # Get commits between the previous tag and the current tag
            COMMITS=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"%s" | grep -v "Merge")
          fi
          
          # Extract changes based on commit types
          echo "[" > changes.json
          
          # Process feature commits
          FEATURES=$(echo "$COMMITS" | grep -i "^feat" || echo "")
          if [ ! -z "$FEATURES" ]; then
            while IFS= read -r line; do
              DESCRIPTION=$(echo "$line" | sed -E 's/^feat(\([^)]+\))?:\s*//')
              echo "  {" >> changes.json
              echo "    \"type\": \"feature\"," >> changes.json
              echo "    \"description\": \"$DESCRIPTION\"" >> changes.json
              echo "  }," >> changes.json
            done <<< "$FEATURES"
          fi
          
          # Process improvement commits
          IMPROVEMENTS=$(echo "$COMMITS" | grep -i "^improve\|^refactor\|^perf" || echo "")
          if [ ! -z "$IMPROVEMENTS" ]; then
            while IFS= read -r line; do
              DESCRIPTION=$(echo "$line" | sed -E 's/^(improve|refactor|perf)(\([^)]+\))?:\s*//')
              echo "  {" >> changes.json
              echo "    \"type\": \"improvement\"," >> changes.json
              echo "    \"description\": \"$DESCRIPTION\"" >> changes.json
              echo "  }," >> changes.json
            done <<< "$IMPROVEMENTS"
          fi
          
          # Process fix commits
          FIXES=$(echo "$COMMITS" | grep -i "^fix" || echo "")
          if [ ! -z "$FIXES" ]; then
            while IFS= read -r line; do
              DESCRIPTION=$(echo "$line" | sed -E 's/^fix(\([^)]+\))?:\s*//')
              echo "  {" >> changes.json
              echo "    \"type\": \"fix\"," >> changes.json
              echo "    \"description\": \"$DESCRIPTION\"" >> changes.json
              echo "  }," >> changes.json
            done <<< "$FIXES"
          fi
          
          # Process breaking change commits
          BREAKING=$(echo "$COMMITS" | grep -i "BREAKING CHANGE" || echo "")
          if [ ! -z "$BREAKING" ]; then
            while IFS= read -r line; do
              DESCRIPTION=$(echo "$line" | sed -E 's/^.*BREAKING CHANGE:\s*//')
              echo "  {" >> changes.json
              echo "    \"type\": \"breaking\"," >> changes.json
              echo "    \"description\": \"$DESCRIPTION\"" >> changes.json
              echo "  }," >> changes.json
            done <<< "$BREAKING"
          fi
          
          # Remove trailing comma if exists
          sed -i '$ s/,$//' changes.json
          
          echo "]" >> changes.json
          
          # Show generated changes
          cat changes.json
      
      - name: Update release file
        run: |
          # Ensure VERSION is set from the environment
          # We use the VERSION that was set in the 'Extract version from tag' step
          echo "Using VERSION=$VERSION"
          
          # Create title based on version
          TITLE="Version $VERSION Release"
          
          # Create description
          DESCRIPTION="This release includes new features, improvements, and bug fixes."
          
          # Update the release file
          node scripts/update-release.js --version=$VERSION --title="$TITLE" --description="$DESCRIPTION" --changes=./changes.json
      
      - name: Install GitHub CLI via Snap
        run: sudo snap install gh
      
      - name: Authenticate GitHub CLI
        run: |
          # Set the GH_CONFIG_DIR environment variable
          export GH_CONFIG_DIR=/home/runner/gh_config
          mkdir -p "$GH_CONFIG_DIR"
          # Set the GH_TOKEN environment variable for authentication
          export GH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          # Authenticate using GitHub token
          echo "$GH_TOKEN" | gh auth login --with-token
        env:
          GH_CONFIG_DIR: /home/runner/gh_config
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request using GitHub CLI
        run: |
          gh pr create \
          --base main \
          --head "release-update-${{ github.ref_name }}" \
          --title "Feat: Update release notes for ${{ github.ref_name }}" \
          --body "This PR updates the release notes for version ${{ github.ref_name }}.\n\nAutomated PR created by GitHub Actions."
        id: create_pr

      - name: Wait for status checks
        run: |
          PR_NUMBER=${{ steps.create_pr.outputs.pull-request-number }}
          echo "Created PR #${PR_NUMBER}"
          
          for i in {1..10}; do
            gh pr checks $PR_NUMBER && break
            sleep 30
          done

      - name: Enable Pull Request Auto-Merge
        if: steps.create_pr.outputs.pull-request-operation == 'created'
        run: |
          PR_NUMBER=${{ steps.create_pr.outputs.pull-request-number }}
          echo "Created PR #${PR_NUMBER}"
          
          # Wait for checks to pass before merging
          sleep 60 # Give time for PR checks to start
          
          # Enable auto-merge for the PR
          gh pr merge --auto --merge "$PR_NUMBER"
          
          # Approve the PR
          gh pr review "$PR_NUMBER" --approve
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
