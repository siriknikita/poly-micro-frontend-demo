name: Update Release Notes

on:
  push:
    tags:
      - 'v*' # Run workflow when a tag starting with 'v' is pushed (e.g., v1.3.0)

jobs:
  update-release:
    runs-on: ubuntu-latest
    # Add permissions needed for pushing to the repository
    permissions:
      contents: write
      pull-requests: write
      issues: write
      statuses: write
      checks: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for commit messages
          token: ${{ secrets.GITHUB_TOKEN }} # Use the GitHub token for initial checkout

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Generate changes from commit messages
        run: |
          # Use the parse-commits.js script to generate changes.json
          node .github/scripts/parse-commits.js
          
          # Show generated changes
          cat releases/changes.json

      - name: Update release file
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ensure VERSION is set from the environment
          # We use the VERSION that was set in the 'Extract version from tag' step
          echo "Using VERSION=$VERSION"

          # Create title based on version
          TITLE="Version $VERSION Release"

          # Create description
          DESCRIPTION="This release includes new features, improvements, and bug fixes."

          # Update the release file
          node .github/scripts/update-release.js --version=$VERSION --title="$TITLE" --description="$DESCRIPTION" --changes=./changes.json

      - name: Configure Git with PAT
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git remote set-url origin "https://x-access-token:${{ secrets.BOT_PAT }}@github.com/${{ github.repository }}.git"

      - name: Create Branch and Commit
        run: |
          BRANCH_NAME="release-update-v${VERSION}"
          git checkout -b "$BRANCH_NAME"
          git add .
          git commit -m "Feat: Update release notes for v${VERSION}"
          git push origin "$BRANCH_NAME"

      - name: Create Pull Request using GitHub CLI
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.BOT_PAT }}
          GH_CONFIG_DIR: /home/runner/gh_config
        run: |
          # Use the create-release-pr.js script to create PR and get PR number
          node .github/scripts/create-release-pr.js --version=${VERSION}
          
          # Extract PR number from script output
          # Store the PR number in the environment variable
          PR_NUMBER=$(cat .github/pr_number.txt 2>/dev/null || echo "")
          echo "PR created with number: $PR_NUMBER"


      - name: Wait for status checks
        run: |
          # Use the check-pr-status.js script to check PR status
          PR_NUMBER=$(cat .github/pr_number.txt 2>/dev/null || echo "")
          echo "Checking PR status for PR #$PR_NUMBER"
          
          if [ -n "$PR_NUMBER" ]; then
            node .github/scripts/check-pr-status.js --pr=$PR_NUMBER --max-attempts=10 --wait-seconds=30
          else
            echo "No PR number found. Skipping status check."
          fi
        env:
          GH_CONFIG_DIR: /home/runner/gh_config
          GH_TOKEN: ${{ secrets.BOT_PAT }}
